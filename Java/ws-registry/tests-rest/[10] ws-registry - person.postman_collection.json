{
	"info": {
		"_postman_id": "809999b7-7764-4ab7-b3f8-5f086c4acc9c",
		"name": "[10] ws-registry - person",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "SuccessRequests",
			"item": [
				{
					"name": "findAll",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "57bfcf25-6e8c-45c0-ab0a-8eb27a34aba4",
								"exec": [
									"//parse response",
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Size bigger than 0\", function () {",
									"    pm.expect(jsonData.content.length).to.gt(0);",
									"});",
									"",
									"// update test variables",
									"pm.environment.set( \"personId\", jsonData.content[0].personId );"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/ws-registry/person/?page=1&size=1000",
							"host": [
								"{{url}}"
							],
							"path": [
								"ws-registry",
								"person",
								""
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "size",
									"value": "1000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "findOne",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5c14f9d6-dffc-455d-b3cb-72c05ca994f9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d5936bd2-eb59-4cda-bfce-0693bb66e04a",
								"exec": [
									"//parse response",
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"PersonId OK\", function () {",
									"    pm.expect(jsonData.personId).to.eq( pm.environment.get( \"personId\" ) );",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/ws-registry/person/{{personId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"ws-registry",
								"person",
								"{{personId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "findOneWithAllInfo",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5c14f9d6-dffc-455d-b3cb-72c05ca994f9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d5936bd2-eb59-4cda-bfce-0693bb66e04a",
								"exec": [
									"//parse response",
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"PersonId OK\", function () {",
									"    pm.expect(jsonData.person.personId).to.eq( pm.environment.get( \"personId\" ) );",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/ws-registry/person/{{personId}}/info",
							"host": [
								"{{url}}"
							],
							"path": [
								"ws-registry",
								"person",
								"{{personId}}",
								"info"
							]
						}
					},
					"response": []
				},
				{
					"name": "findAllByCPF",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5568bb39-7656-427c-99d4-3e0140356c62",
								"exec": [
									"//parse response",
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Size greather than 0\", function () {",
									"    pm.expect(jsonData.content.length).to.gt( 0 );",
									"});",
									"",
									"pm.test(\"Name OK\", function () {",
									"    let content = jsonData.content;",
									"    for ( let i= 0; i < content.length; i++ ) {",
									"        pm.expect(content[i].name).to.include( 'ALEX' );",
									"    }",
									"});",
									"",
									"pm.test(\"CPF OK\", function () {",
									"    let content = jsonData.content;",
									"    for ( let i= 0; i < content.length; i++ ) {",
									"        pm.expect(content[i].cpf).to.include( '' );",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/ws-registry/person/?cpf=",
							"host": [
								"{{url}}"
							],
							"path": [
								"ws-registry",
								"person",
								""
							],
							"query": [
								{
									"key": "cpf",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "findAllByName",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5568bb39-7656-427c-99d4-3e0140356c62",
								"exec": [
									"//parse response",
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Size greather than 0\", function () {",
									"    pm.expect(jsonData.content.length).to.gt( 0 );",
									"});",
									"",
									"pm.test(\"Name OK\", function () {",
									"    let content = jsonData.content;",
									"    for ( let i= 0; i < content.length; i++ ) {",
									"        pm.expect(content[i].name).to.include( 'MARY' );",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/ws-registry/person/?name=Mary&size=500",
							"host": [
								"{{url}}"
							],
							"path": [
								"ws-registry",
								"person",
								""
							],
							"query": [
								{
									"key": "name",
									"value": "Mary"
								},
								{
									"key": "size",
									"value": "500"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "findAllPaging",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "de773c4c-acc7-4cb4-9586-efa1f0c928c6",
								"exec": [
									"//parse response",
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Size bigger than 0\", function () {",
									"    pm.expect(jsonData.content.length).to.gt(0);",
									"});",
									"",
									"pm.test(\"Size equals to 10\", function () {",
									"    pm.expect(jsonData.content.length).to.eq(10);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/ws-registry/person/?page=1&size=10",
							"host": [
								"{{url}}"
							],
							"path": [
								"ws-registry",
								"person",
								""
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getEmails",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5c14f9d6-dffc-455d-b3cb-72c05ca994f9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d5936bd2-eb59-4cda-bfce-0693bb66e04a",
								"exec": [
									"//parse response",
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"PersonId OK\", function () {",
									"    let content = jsonData.content;",
									"    for ( let i= 0; i < content.length; i++ ) {",
									"        pm.expect(content[i].personId + '').to.include( pm.environment.get(\"personId\") );",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/ws-registry/person/{{personId}}/email",
							"host": [
								"{{url}}"
							],
							"path": [
								"ws-registry",
								"person",
								"{{personId}}",
								"email"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPhones",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5568bb39-7656-427c-99d4-3e0140356c62",
								"exec": [
									"//parse response",
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Size greather than 0\", function () {",
									"    pm.expect(jsonData.content.length).to.gt( 0 );",
									"});",
									"",
									"pm.test(\"PersonId OK\", function () {",
									"    let content = jsonData.content;",
									"    for ( let i= 0; i < content.length; i++ ) {",
									"        pm.expect(content[i].personId + '').to.include( pm.environment.get(\"personId\") );",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/ws-registry/person/{{personId}}/phone",
							"host": [
								"{{url}}"
							],
							"path": [
								"ws-registry",
								"person",
								"{{personId}}",
								"phone"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPhonesByType",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5568bb39-7656-427c-99d4-3e0140356c62",
								"exec": [
									"//parse response",
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Size greather than 0\", function () {",
									"    pm.expect(jsonData.content.length).to.gt( 0 );",
									"});",
									"",
									"pm.test(\"PersonId OK\", function () {",
									"    let content = jsonData.content;",
									"    for ( let i= 0; i < content.length; i++ ) {",
									"        pm.expect(content[i].personId + '').to.include( pm.environment.get(\"personId\") );",
									"    }",
									"});",
									"",
									"pm.test(\"PhoneTypeId OK\", function () {",
									"    let content = jsonData.content;",
									"    for ( let i= 0; i < content.length; i++ ) {",
									"        pm.expect(content[i].phoneType.phoneTypeId).to.equals( 1 );",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/ws-registry/person/{{personId}}/phone/?phoneTypeId=1",
							"host": [
								"{{url}}"
							],
							"path": [
								"ws-registry",
								"person",
								"{{personId}}",
								"phone",
								""
							],
							"query": [
								{
									"key": "phoneTypeId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "8dc6b244-562b-4e5a-9eb4-1ff0cb80b02d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "314b5df2-c02f-4e86-a2c7-63bb8c9185ed",
						"type": "text/javascript",
						"exec": [
							"// test of status",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "CRUDRequests",
			"item": [
				{
					"name": "create",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "735429b5-f0b2-4f53-88d8-3be984c097ec",
								"exec": [
									"// test of status",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"New Person created\", function () {",
									"    pm.expect(jsonData.personId).to.gt(0);",
									"});",
									"",
									"// update test variables",
									"pm.environment.set( \"personIdToDelete\", jsonData.personId );"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9ecd8972-2fed-405a-b38b-ef67e328abbe",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"genderType\": \"M\",\n    \"birthDate\": \"1978-02-24\",\n    \"name\": \"NOME DE TESTE\",\n    \"cpf\": \"11111111111\",\n    \"birthCountry\": \"Brasil\",\n    \"birthCity\": \"Porto Alegre\",\n    \"breed\": {\n        \"breedId\": 1\n    },\n    \"maritalStatus\": {\n        \"maritalStatusId\": 1\n    },\n    \"fatherName\": \"NOME DO PAI\",\n    \"motherName\": \"NOME DA MÃE\",\n    \"active\": \"S\"\n}"
						},
						"url": {
							"raw": "{{url}}/ws-registry/person/",
							"host": [
								"{{url}}"
							],
							"path": [
								"ws-registry",
								"person",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "createMinimal",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "56f294d5-3b83-4a4f-8a4b-4262395d1034",
								"exec": [
									"// test of status",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"New PersonId created\", function () {",
									"    pm.expect(jsonData.personId).to.gt(0);",
									"});",
									"",
									"// update test variables",
									"pm.environment.set( \"personIdToDelete2\", jsonData.personId );"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e7771b92-0300-426f-9615-3d7efb4b8ba0",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"genderType\": \"M\",\n    \"birthDate\": \"1980-02-24\",\n    \"name\": \"NOME DE TESTE 2\"\n}"
						},
						"url": {
							"raw": "{{url}}/ws-registry/person/",
							"host": [
								"{{url}}"
							],
							"path": [
								"ws-registry",
								"person",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "update",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "56f294d5-3b83-4a4f-8a4b-4262395d1034",
								"exec": [
									"// test of status",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ae8cb6b6-f8b9-4c6b-943d-9d3e21f39a02",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"personId\" : {{personIdToDelete}},\n\t\"genderType\": \"M\",\n    \"birthDate\": \"1978-02-24\",\n    \"name\": \"NOME DE TESTE EDITADO\",\n    \"cpf\": \"1111111111\",\n    \"birthCountry\": \"BRASIL\",\n    \"birthCity\": \"PORTO ALEGRE\",\n    \"breed\": {\n        \"breedId\": 2\n    },\n    \"maritalStatus\": {\n        \"maritalStatusId\": 2\n    },\n    \"fatherName\": \"Nome do Pai Editado\",\n    \"motherName\": \"Nome da Mãe Editado\"\n}"
						},
						"url": {
							"raw": "{{url}}/ws-registry/person/",
							"host": [
								"{{url}}"
							],
							"path": [
								"ws-registry",
								"person",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "56f294d5-3b83-4a4f-8a4b-4262395d1034",
								"exec": [
									"// test of status",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"personId\" : {{personIdToDelete}}\n}"
						},
						"url": {
							"raw": "{{url}}/ws-registry/person/",
							"host": [
								"{{url}}"
							],
							"path": [
								"ws-registry",
								"person",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "deleteMinimal",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "56f294d5-3b83-4a4f-8a4b-4262395d1034",
								"exec": [
									"// test of status",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"personId\" : {{personIdToDelete2}}\n}"
						},
						"url": {
							"raw": "{{url}}/ws-registry/person/",
							"host": [
								"{{url}}"
							],
							"path": [
								"ws-registry",
								"person",
								""
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "6cd80d92-e999-4d89-a5fb-23a5eac16cc4",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "21ccfa4c-dad9-4564-8c84-6757b21ff65e",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "ErrorRequests",
			"item": [
				{
					"name": "findOneInvalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "56f294d5-3b83-4a4f-8a4b-4262395d1034",
								"exec": [
									"// test of status",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c81d131a-8324-4951-b611-79a559972b7b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/ws-registry/person/-1",
							"host": [
								"{{url}}"
							],
							"path": [
								"ws-registry",
								"person",
								"-1"
							]
						}
					},
					"response": []
				},
				{
					"name": "createWithoutGenderType",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "56f294d5-3b83-4a4f-8a4b-4262395d1034",
								"exec": [
									"// test of status",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Error message confirmed\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"GenderType(gênero) não pode ser nulo.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"birthDate\": \"1978-02-24\",\n    \"name\": \"NOME DE TESTE\",\n    \"cpf\": \"11111111111\",\n    \"birthCountry\": \"Brasil\",\n    \"birthCity\": \"Porto Alegre\",\n    \"breed\": {\n        \"breedId\": 1\n    },\n    \"maritalStatus\": {\n        \"maritalStatusId\": 1\n    },\n    \"fatherName\": \"NOME DO PAI\",\n    \"motherName\": \"NOME DA MÃE\",\n    \"active\": \"S\"\n}"
						},
						"url": {
							"raw": "{{url}}/ws-registry/person/",
							"host": [
								"{{url}}"
							],
							"path": [
								"ws-registry",
								"person",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "createWithoutBirthDate",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "56f294d5-3b83-4a4f-8a4b-4262395d1034",
								"exec": [
									"// test of status",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Error message confirmed\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"BirthDate não pode ser nulo.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"genderType\": \"M\",\n    \"name\": \"NOME DE TESTE\",\n    \"cpf\": \"11111111111\",\n    \"birthCountry\": \"Brasil\",\n    \"birthCity\": \"Porto Alegre\",\n    \"breed\": {\n        \"breedId\": 1\n    },\n    \"maritalStatus\": {\n        \"maritalStatusId\": 1\n    },\n    \"fatherName\": \"NOME DO PAI\",\n    \"motherName\": \"NOME DA MÃE\",\n    \"active\": \"S\"\n}"
						},
						"url": {
							"raw": "{{url}}/ws-registry/person/",
							"host": [
								"{{url}}"
							],
							"path": [
								"ws-registry",
								"person",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "createWithoutName",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "56f294d5-3b83-4a4f-8a4b-4262395d1034",
								"exec": [
									"// test of status",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Error message confirmed\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Name não pode ser nulo.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"genderType\": \"M\",\n    \"birthDate\": \"1978-02-24\",\n    \"cpf\": \"11111111111\",\n    \"birthCountry\": \"Brasil\",\n    \"birthCity\": \"Porto Alegre\",\n    \"breed\": {\n        \"breedId\": 1\n    },\n    \"maritalStatus\": {\n        \"maritalStatusId\": 1\n    },\n    \"fatherName\": \"NOME DO PAI\",\n    \"motherName\": \"NOME DA MÃE\",\n    \"active\": \"S\"\n}"
						},
						"url": {
							"raw": "{{url}}/ws-registry/person/",
							"host": [
								"{{url}}"
							],
							"path": [
								"ws-registry",
								"person",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "updateInvalidId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "56f294d5-3b83-4a4f-8a4b-4262395d1034",
								"exec": [
									"// test of status",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"personId\" : -1,\n\t\"genderType\": \"M\",\n    \"birthDate\": \"1978-02-24\",\n    \"name\": \"NOME DE TESTE EDITADO\",\n    \"cpf\": \"1111111111\",\n    \"birthCountry\": \"BRASIL\",\n    \"birthCity\": \"PORTO ALEGRE\",\n    \"breed\": {\n        \"breedId\": 2\n    },\n    \"maritalStatus\": {\n        \"maritalStatusId\": 2\n    },\n    \"fatherName\": \"Nome do Pai Editado\",\n    \"motherName\": \"Nome da Mãe Editado\"\n}"
						},
						"url": {
							"raw": "{{url}}/ws-registry/person/",
							"host": [
								"{{url}}"
							],
							"path": [
								"ws-registry",
								"person",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "updateWithoutPersonId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "56f294d5-3b83-4a4f-8a4b-4262395d1034",
								"exec": [
									"// test of status",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"genderType\": \"M\",\n    \"birthDate\": \"1978-02-24\",\n    \"name\": \"NOME DE TESTE EDITADO\",\n    \"cpf\": \"1111111111\",\n    \"birthCountry\": \"BRASIL\",\n    \"birthCity\": \"PORTO ALEGRE\",\n    \"breed\": {\n        \"breedId\": 2\n    },\n    \"maritalStatus\": {\n        \"maritalStatusId\": 2\n    },\n    \"fatherName\": \"Nome do Pai Editado\",\n    \"motherName\": \"Nome da Mãe Editado\"\n}"
						},
						"url": {
							"raw": "{{url}}/ws-registry/person/",
							"host": [
								"{{url}}"
							],
							"path": [
								"ws-registry",
								"person",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "updateWithoutGenderType",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "56f294d5-3b83-4a4f-8a4b-4262395d1034",
								"exec": [
									"// test of status",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Error message confirmed\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"GenderType(gênero) não pode ser nulo.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"personId\" : {{personIdToDelete}},\n    \"birthDate\": \"1978-02-24\",\n    \"name\": \"NOME DE TESTE EDITADO\",\n    \"cpf\": \"1111111111\",\n    \"birthCountry\": \"BRASIL\",\n    \"birthCity\": \"PORTO ALEGRE\",\n    \"breed\": {\n        \"breedId\": 2\n    },\n    \"maritalStatus\": {\n        \"maritalStatusId\": 2\n    },\n    \"fatherName\": \"Nome do Pai Editado\",\n    \"motherName\": \"Nome da Mãe Editado\"\n}"
						},
						"url": {
							"raw": "{{url}}/ws-registry/person/",
							"host": [
								"{{url}}"
							],
							"path": [
								"ws-registry",
								"person",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "updateWithoutBirthDate",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "56f294d5-3b83-4a4f-8a4b-4262395d1034",
								"exec": [
									"// test of status",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Error message confirmed\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"BirthDate não pode ser nulo.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"personId\" : {{personIdToDelete}},\n\t\"genderType\": \"M\",\n    \"name\": \"NOME DE TESTE EDITADO\",\n    \"cpf\": \"1111111111\",\n    \"birthCountry\": \"BRASIL\",\n    \"birthCity\": \"PORTO ALEGRE\",\n    \"breed\": {\n        \"breedId\": 2\n    },\n    \"maritalStatus\": {\n        \"maritalStatusId\": 2\n    },\n    \"fatherName\": \"Nome do Pai Editado\",\n    \"motherName\": \"Nome da Mãe Editado\"\n}"
						},
						"url": {
							"raw": "{{url}}/ws-registry/person/",
							"host": [
								"{{url}}"
							],
							"path": [
								"ws-registry",
								"person",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "updateWithoutName",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "56f294d5-3b83-4a4f-8a4b-4262395d1034",
								"exec": [
									"// test of status",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Error message confirmed\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Name não pode ser nulo.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"personId\" : {{personIdToDelete}},\n\t\"genderType\": \"M\",\n    \"birthDate\": \"1978-02-24\",\n    \"cpf\": \"1111111111\",\n    \"birthCountry\": \"BRASIL\",\n    \"birthCity\": \"PORTO ALEGRE\",\n    \"breed\": {\n        \"breedId\": 2\n    },\n    \"maritalStatus\": {\n        \"maritalStatusId\": 2\n    },\n    \"fatherName\": \"Nome do Pai Editado\",\n    \"motherName\": \"Nome da Mãe Editado\"\n}"
						},
						"url": {
							"raw": "{{url}}/ws-registry/person/",
							"host": [
								"{{url}}"
							],
							"path": [
								"ws-registry",
								"person",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "deleteInvalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "56f294d5-3b83-4a4f-8a4b-4262395d1034",
								"exec": [
									"// test of status",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"personId\" : -1\n}"
						},
						"url": {
							"raw": "{{url}}/ws-registry/person/",
							"host": [
								"{{url}}"
							],
							"path": [
								"ws-registry",
								"person",
								""
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "f2d8cdb4-119d-4415-9a7d-421aaca929cb",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "640fc883-fc30-4ffb-972c-45ae534a48e6",
				"type": "text/javascript",
				"exec": [
					"// simple tests of speed",
					"pm.test(\"Response time is less than 400ms\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(400);",
					"});",
					""
				]
			}
		}
	]
}